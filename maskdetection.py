# -*- coding: utf-8 -*-
"""maskdetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xdg_QoYdJyF3aGOZSQuzPFyX8xSRmIOF
"""

!pip install opendatasets
import opendatasets as od 
import pathlib,re,torch
from lxml import etree

from google.colab import drive
drive.mount('/content/drive')

cd /content/drive/MyDrive/PROJECTIONS

od.download('https://www.kaggle.com/datasets/andrewmvd/face-mask-detection')#f42a719ce5057ddc4741bf7f415ce98e

!mkdir labels

def path(i):
    # parse the XML file
    tree = etree.parse(f'{str(i)}')
    #print(tree)
    # convert the tree to a string
    xml_string = etree.tostring(tree, pretty_print=True)
    s=xml_string.decode()
    xml=s.split('\n')
    #print(xml)
    
    s_in=xml.index(r'    <size>')+1
    e_in=xml.index(r'    </size>')
    w,h,d=map(int,re.findall('\d+','\n'.join(xml[s_in:e_in])))
    #print(w,h,d)
    f_name=re.findall(r'>[a-zA-Z0-9]+.png','\n'.join(xml))
    f_name=f_name[0][1:]
    #print(f_name.split('.')[0])
    x=f_name.split('.')[0]
    f=open(f'{x}.txt','w')
    
    while xml.count('    <object>'):
        s_in,e_in=xml.index('    <object>'),xml.index('    </object>')
        st=xml[s_in:e_in]
        name=re.findall(r'<name>([a-zA-Z0-9_]+)</name>','\n'.join(st))[0]
        xmin,ymin,xmax,ymax=map(int,re.findall('\d+','\n'.join(st))[3:])
        xml[s_in],xml[e_in]=8,9
        #print(name,xmin/w,ymin/h,xmax/w,ymax/h)
        if name =='with_mask':name=0
        elif name=='without_mask':name=1
        else:name=2
        f.write(str(name)+' '+str(xmin/w)+' '+str(ymin/h)+' '+str(xmax/w)+' '+str(ymin/h)+'\n')
        #print(name,xmin/w,ymin/h,xmax/w,ymax/h)
    f.close()

cd labels

pa=list(pathlib.Path(r'/content/drive/MyDrive/PROJECTIONS/face-mask-detection/annotations').glob('*'))
for i in pa:
    path(i)

with open('classes.txt','w') as f:
    f.write('with_mask\nwithout_mask\nmask_weared_incorrect\n')

cd ..

# Commented out IPython magic to ensure Python compatibility.
!mkdir main
# %cd main
!mkdir train
!mkdir val
# %cd ..

!git clone https://github.com/ultralytics/yolov5

!nvidia-smi

# Commented out IPython magic to ensure Python compatibility.
# %pwd
# %cd yolov5

!pip install -r requirements.txt

pwd

cd ..

"""# ***TRAIN & VALIDATION MOVING THE DATA TO THE FOLDER***"""

ip=list(pathlib.Path('/content/drive/MyDrive/PROJECTIONS/face-mask-detection/images').glob('*.png'))

ls

lp=list(pathlib.Path('/content/drive/MyDrive/PROJECTIONS/labels').glob('*.txt'))

tr=ip[:int(len(ip)*0.8)]
val=ip[int(len(ip)*0.8):]

import shutil
def copyfile(i,d):
    shutil.copy2(str(i), str(d))

"""**MOVING THE TRAIN DATA TO TRAINING FOLDER**"""

for i in tr:
  parts=str(i).split('/')
  lable_parts=str(i).split('/')
  lable_parts[-2]='labels'
  lable_parts.pop(-3)
  lable_parts[-1]=lable_parts[-1].split('.')[0]+'.txt'
  copyfile('/'.join(parts),'/content/drive/MyDrive/PROJECTIONS/main/train')
  copyfile('/'.join(lable_parts),'/content/drive/MyDrive/PROJECTIONS/main/train')

"""**MOVING THE VALIDATION DATA TO VALIDATION FOLDER**"""

for i in tr:
  parts=str(i).split('/')
  lable_parts=str(i).split('/')
  lable_parts[-2]='labels'
  lable_parts.pop(-3)
  lable_parts[-1]=lable_parts[-1].split('.')[0]+'.txt'
  copyfile('/'.join(parts),'/content/drive/MyDrive/PROJECTIONS/main/val')
  copyfile('/'.join(lable_parts),'/content/drive/MyDrive/PROJECTIONS/main/val')

pwd

"""# TRAINING THE YOLOMODEL"""

od.download('https://github.com/ultralytics/yolov5/releases/download/v6.2/yolov5x.pt')

!mv /content/drive/MyDrive/PROJECTIONS/yolov5x.pt /content/drive/MyDrive/PROJECTIONS/yolov5

cd /content/drive/MyDrive/PROJECTIONS/yolov5

#@title Default title text
!python train.py --img 360 --batch 32 --epochs 100 --data coco128.yaml --weights /content/drive/MyDrive/PROJECTIONS/yolov5/runs/train/exp/weights/last.pt

"""# ***LOADING THE SAVED MODEL***"""

import torch

model=torch.hub.load('ultralytics/yolov5','custom',path='/content/drive/MyDrive/PROJECTIONS/yolov5/runs/train/exp/weights/last.pt')

r=model('/content/drive/MyDrive/PROJECTIONS/main/val/maksssksksss100.png')

r.show()



torch.save(model,'/content/drive/MyDrive/PROJECTIONS/model')#$-SAVING THE YOLO MODEL AS PT FILE

# Commented out IPython magic to ensure Python compatibility.
import cv2
import matplotlib.pyplot as plt
# %matplotlib inline

#c=cv2.imread('/content/drive/MyDrive/PROJECTIONS/main/val/maksssksksss100.png')
plt.imshow(c)
with open('/content/drive/MyDrive/PROJECTIONS/main/val/maksssksksss100.txt') as f:
  print(f.read())
c.shape

cv2.rectangle(c,(int(0.4725 *400),int(0.13274336283185842 *226)),(int(.6125*400)-int(0.4725 *400),int(0.13274336283185842 *226)-int(0.13274336283185842*226)),(255,55,143),8)

mo=torch.load('/content/drive/MyDrive/PROJECTIONS/model')



